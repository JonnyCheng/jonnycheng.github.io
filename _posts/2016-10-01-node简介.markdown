---
layout: post
title:  "Node简介"
date:   2016-10-01 +0800
categories: nodejs
---
由于项目重构过程中使用到Node，为了能更好的掌握Node，决定系统的了解一下node。

Ryan Dahl作为一名资深C/C++工程师，在创造Node前主要工作都是围绕高性能Web服务器进行的，经过不断尝试和失败后，他找到了设计高性能Web服务器的要点：事件驱动、非阻塞I/O。

写作Node的时候，RyanDahl评估了C、Lua、Haskell、Ruby等语言作为备选实现，但他最终选择了用JavaScript去实现Node，是因为，JavaScript比C的开发门槛要低，比Lua的历史包袱要少。尽管服务器端JavaScript存在很多年，但是后端部分一直没有市场，可以说历史包袱为零，为其导入非阻塞I/O库没有额外阻力。另外，JavaScript在浏览器中有广泛的事件驱动方面的应用，暗河Ryan Dahl喜好基于事件驱动的需求。但是，第二次浏览器大战也渐渐分出高下，Chrome浏览器的JavaScript引擎V8摘得性能第一的桂冠，考虑到高性能、符合事件驱动、没有历史包袱这3歌主要原因，JavaScript成为了Node的实现语言。

V8给Chrome带来了一个强劲的心脏，也给JavaScript带来了一个新局面。Node结构与Chrome十分相似，他们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node则通过事件驱动来服务I/O。在Node中，JavaScript可以通过底层libuv随心所欲的访问本地文件，可以搭建WebSocket服务器端，可以连接数据库，可以如Web Workers一样玩转多进程。Node打破了过去JavaScript只能在浏览器中运行的局面。前后端编程环境统一，可以大大降低前后端转换所需上下文交换代价。

Node作为后端JavaScript运行平台，它保留了JavaScript熟悉的接口，没有改写语言本身的特性，依旧基于原型链和作用域，并将前端中广泛运用的思想迁移到了服务器端。

#### 异步I/O

在Node中，绝大多数的操作都以异步的方式进行调用。我们可以从语言层面自然地进行并行I/O操作。每个调用之间无须等待之前的I/O调用结束。在编程模型上可以极大提升效率。同步I/O中，业务代码耗时是n个任务耗时之和，而异步I/O耗时则是取决于最慢的那个任务的耗时时间，如此看来异步带来的优势是显而易见的。

#### 事件与回调函数

事件的编程方式具有轻量级、松耦合、只关注事物点等优势、但是在多个异步任务的场景下，事件与事件之间各自独立，如何协作是一个问题。JavaScript将回调函数作为第一等公民来对待，可以将函数作为对象专递给方法作为实参进行调用。

与其他Web后端编程语言相比，Node除了异步和事件外，回调函数是一大特色。纵观下来，回调函数也是最好的接受异步调用返回数据的方式。但是这种编程方式对于很多习惯同步思想编程的人来说，也许是十分不习惯的。代码的编写顺序与执行顺序并无关系，这对他们可能造成阅读上的障碍。在流程控制方面，因为穿插了异步方法和回调函数，与常规同步方式相比，变得不那么一目了然了。

#### 单线程

Node保持了JavaScript在浏览器中的单线程特点，而且在Node中，JavaScript与其余线程是无法共享任何状态的。单线程的最大好处就是不用像多线程编程那样处处在意状态的同步问题，这里没有死锁的存在，也没有线程上下文交换所带来的性能上的开销。单线程也有自身的弱点，无法利用多核CPU；错误会引起整个应用推出，应用健壮性值得考虑；大量计算占用CPU导致无法继续调用异步I/O。Node采用了与Web Workers相同的思路来解决单线程中大计算量的问题：child_process。子进程的出现意味着Node可以从容地应对单线程在健壮性和无法利用多核CPU方面的问题。

#### 跨平台

兼容*nix与windows得益于libuv。

在进行技术选型前，了解技术适合什么样的场景是有必要的。

#### I/O密集型

从单线程的角度考虑，Node处理I/O的能力强是毋庸置疑的，面向网络擅长处理并行I/O，能够有效的硬件资源。

#### 不擅长CPU密集型业务？

由于V8的执行效率是十分高的。单以执行效率来做评判，V8的执行效率是毋庸置疑的。但从另一个角度来看，由于JavaScript单线程的原因，如果有长时间运行的计算，将会导致CPU时间片不能释放，使得后续I/O无法发起。但适当调整和分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起，这样即可同时享受到并行异步I/O的好处，又能充分利用CPU。

#### 和平共处

JavaScript一旦一统前后端，会不会干掉其他语言？只能说搁置争议共同开发。

#### 分布式

Node高效利用并行I/O的过程，也是高效使用数据库的过程，对于Node，这个行为只是一次普通的I/O，对于数据库而言，却是一次复杂的计算，所以也是进而充分压榨硬件资源的过程。

#### Node使用者

前后端语言环境统一；高性能I/O实时应用；并行I/O高效分布式环境；并行I/O有效率用稳定接口提升Web渲染能力；云计算平台提供Node支持；工具类应用。