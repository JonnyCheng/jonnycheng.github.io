---
layout: post
title:  "浅谈Hybird开发"
date:   2016-06-15 +0800
categories: development
---
考虑到成本，团队成员，技术成熟度，时间，项目需求等多维因素。在追求开发效率与高性能这条本身互斥的道路上，我们还有很长的路要走。

### 一、App开发现状分析

#### 1.纯Web开发

优点：开发快、成本低，开发效率最高；
缺点：纯web框架，浏览器运行，因此无法调用手机系统原生功能。

#### 2.Native开发

优点：性能最优；
缺点：开发效率低，成本高；

#### 3.Hybrid开发

Hybird开发是个笼统的概念，大致可分为三类模式。

##### 3.1 PhoneGap等作为中间件，JavaScript执行逻辑通过中间件访问底层API。
优点：开发效率高；
缺点：随着业务越复杂中间件桥接越频繁，导致性能问题越明显，另外中间件对不同平台的兼容也是其性能

##### 3.2 RubyMotion等非原生语言利用社区提供的开发者工具进行开发。
优点：不依赖于原生语言；
缺点：性能问题；开发工具以及社区依赖性强。

##### 3.3 Web&Native混合开发，在原生基础上迁入WebView。在Native开发人员写好基本框架以及API的基础上，Web端实现内容的渲染。
优点：开发效率高，业务灵活配置随时发布；
缺点：相对前两种情况性能问题不明显，合理选择使用场景合理优化后性能问题不明显。

### 二、使用场景

基于以上调研结果，拟定选择在开发效率及性能平衡上做的相对最好的方案3.3－Web&Native混合开发。

将合理的技术运用到合适的场景这是Hybird开发的主要优点之一。没有适合所有业务的技术，因此选择好使用场景是Hybird开发的前提。

Web开发适用于更替频繁、展示型模块以及弱操作型模块，比如展示型list、活动广告等。由于Web端在交互性能上与Native对比有天然劣势，因此交互类场景放在Native实现。

### 三、Pixel开发方案

根据实际业务复杂度，拟定将开发方案分为Pixel-Mini方案以及Pixel方案，两种方案主要区别在于Web端工程框架设计与实现。Native端需要处理的若干策略是相同的。

#### 1. Pixel-Mini方案

Pixel-Mini方案主要处理广告、活动推广等mini型项目。此类项目多数为单张静态页，无或简单数据处理业务。

Pixel-Mini项目主要包括三部分Pixel－MiniWeb、Pixel－MiniNative、Pixel－MiniRoute。

##### 1.1 Pixel-MiniWeb

Pixel-MiniWeb工程主要由HTML,CSS,JavaScript文件构成。

HTML包括：具体业务静态页(index.html)；
CSS包括：具体业务样式文件(main.css)、公共CSS文件(normalize.css,bootstrap.css,animations.css)；
JavaScript包括：具体业务Js文件(main.js)、公共JS文件(jquery.min.js,animations.js,audioplayer.js等)。

##### 1.2 Pixel-MiniNative

Pixel-MiniNative工程主要由Android&iOS客户端组成。

Pixel-MiniNative提供包含外层Controller的WebView供Pixel-MiniWeb渲染同时增强页面交互的流畅度，提升用户体验。

##### 1.3 Pixel-MiniRoute

Pixel-MiniRoute为json文件，用来记录Pixel-MiniWeb与Pixel-MiniNative之间的自定义协议。

#### 2. Pixel方案

Pixel方案主要用来处理复杂型业务。

同样Pixel项目主要包括三部分Pixel-Web、Pixel-Native、Pixel-Route。

##### 2.1 Pixel-Web

Pixel-Web主要为单页面应用，工程目录也相对复杂。主体包括Pixel-Project(项目),Pixel-Component(组件)。但主要包括几大块资源Image,CSS,JavaScript。

由于Web工程主要采用单页面应用为主，备选框架一种为以Angular为主的MVC架构，另一种是以React+Redux为主的Unidirectional Data Flow架构。前者优势在于易上手，适合CRUD的项目，劣势在于框架笨重，框架本身存在性能问题，处理复杂业务时MVC框架带来的双向通信机制让调试难度增加。后者的设计初衷就是为了避免传统MVC带来的问题，React渲染效率以及性能是传统Angualr的5-6倍（Demo演示数据）。劣势在于团队需要花费一些学习成本。

Image包括：项目所需图片文件；
CSS包括：具体业务样式文件、公共CSS文件(normalize.css,bootstrap.css,animations.css)；
JavaScript包括：具体业务Js文件、Pixel-Component、公共JS文件(Angular.js,React.js,Redux.js,jquery.min.js,animations.js,audioplayer.js等);

##### 2.2 Pixel-Native

Pixel-Native工程主要由Android&iOS客户端组成。

Pixel-Native提供包含外层Controller的WebView供Pixel-Web渲染同时增强页面交互的流畅度，提升用户体验。另外需要提供资源缓存机制，Pixel-Web端公共资源（公共CSS文件、公共JS文件）都整理打包到Pixel-Native中，模拟本地读取资源，减少Pixel-Web通过网络获取资源提升性能及用户体验。

##### 2.3 Pixel-Route

Pixel-Route为json文件，用来记录Pixel-Web与Pixel-Native之间的自定义协议。

### 四. 开发调试

Hybird开发主要开发环境都基于Mac本地开发。Angular项目工程与目前项目流程可保持一致。React项目工程可采用Webpack搭建dev环境，本地开发打包后上传git仓库，实施部署。

Hybird开发主要调试环境都基于真实移动设备开发，通过chrome://inspect进行调试。好处在于减少二次调试，提升开发效率。

### 五. 存储策略

Native开发健壮的WebView框架，保证良好的用户交互性。除打包绝大部分Web资源作为本地缓存外，部分Web端在CDN请求的资源也需做缓存处理。

Web上线后通过webpack将资源打包为两类。一类是公共资源，一类是业务资源。Native端根据截获的请求选择具体的加载策略（本地加载或CDN加载）。

### 六. 特殊处理

正常网络下，切换页面时Web端呈现加载动画（Pixel-Component之一）。特殊网络条件下，Native端根据网络情况判断是否继续展示WebView内容，断网等情况展示本地400页面。