---
layout: post
title:  "浅谈jQuery源码－选择器"
date:   2014-07-25 +0800
categories: develop
---
无论PC端还是移动端，jQuery都长期伴随着大多数的前端开发者。简洁的对象构建方式，方便的方法调用，出色的兼容性表现决定了jQuery良好的口碑。

jQuery核心就是从DOM中匹配元素后进行操作，例如：$().css();

jQuery奇妙之处在于没有用new进行实例化对象。例如常规的JS实例化一个对象需要如下方法：

{% highlight javascript %}
var aQuery = function(selector, context) {
}
aQuery.prototype = {
    name:function(){},
    age:function(){}
}

var a = new aQuery();

a.name();
{% endhighlight %}
                
但jQuery明显就不是这样定义的。jQuery通过原型传递解决了既能隔离作用域还能使用jQuery圆形对象的作用域问题。

{% highlight javascript %}
var aQuery = function(selector, context) {
       return  new aQuery.prototype.init();
}
aQuery.prototype = {
    init: function() {
        return this;
    },
    name: function() {
        return this.age
    },
    age: 20
}

aQuery.prototype.init.prototype = aQuery.prototype;

console.log(aQuery().name()) //20
{% endhighlight %}

可见实现的关键在于aQuery.prototype.init.prototype = aQuery.prototype;。
jQuery的链式调用又是怎么回事呢？
通过扩展原型方法并通过return this的形式来实现链式调用，利用JS的工厂模式对同一DOM对象的操作指定统一对象。

{% highlight javascript %}
aQuery().init().name()
//分解
a = aQuery();
a.init()
a.name()

aQuery.prototype = {
    init: function() {
        return this;
    },
    name: function() {
        return this
    }
}
{% endhighlight %}
                
jQuery的基础就是查询，正如源码中不时出现的正则表达式一样，接下来就从源码中的正则开始。
之前介绍过正则的相关知识，因此我们可以简单分析一下源码中一个检测HTML字符串的表达式

{% highlight javascript %}
// A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
// Strict HTML recognition (#11290: must start with <)
rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
{% endhighlight %}  
                
将正则一分为二，第一段^(?:\s*(<[\w\W]+>)[^>]*，第二段#([\w-]*))$，综合起来可以理解为匹配HTML标签与ID表达式。
jQuery选择器处理方式有以下九种：

{% highlight javascript %}
$(document)   
$(‘<div>’) 
$(‘div’) 
$(‘#test’) 
$(function(){}) 
$("input:radio", document.forms[0]); 
$(‘input’, $(‘div’)) 
$() 
$("<div>", { 
    "class": "test", 
    text: "Click me!", 
    click: function(){ $(this).toggleClass("test"); } 
}).appendTo("body"); 
$($(‘.test’))
{% endhighlight %}  
                
本质上讲jQuery.fn.init构建的出来的对象，就是jQuery对象

{% highlight javascript %}
init: function( selector, context, rootjQuery ) {
        var match, elem;

        // HANDLE: $(""), $(null), $(undefined), $(false)
        if ( !selector ) {
            return this;
        }

        // Handle HTML strings
        if ( typeof selector === "string" ) {
            // HANDLE: $(DOMElement)
        } else if ( selector.nodeType ) {
            // HANDLE: $(function)
            // Shortcut for document ready
        } else if ( jQuery.isFunction( selector ) ) {
            return rootjQuery.ready( selector );
        }

        if ( selector.selector !== undefined ) {
            this.selector = selector.selector;
            this.context = selector.context;
        }

        return jQuery.makeArray( selector, this );
    }
{% endhighlight %} 

jQuery对象从本质上不仅是DOM，也是不同的组合形式，而且都通过数组的方式储存，未完待续。